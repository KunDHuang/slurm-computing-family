#!/usr/bin/env python

import pandas as pd
import subprocess
import argparse
import sys
import textwrap
import glob

"""
NAME: merge_pileup_stats.py
DESCRIPTION: merge_pileup_stats.py is to merge stats files of pileup.sh into a matrix.
DATE: 02.11.2023
AUTHOR: Kun D. Huang
"""


def filtering_stats(stats_file, 
                    cov_fold, 
                    cov_perc, 
                    matrix_value):
    
    stats_file_df = pd.read_csv(stats_file, sep = "\t", index_col = False)
    stats_file_df = stats_file_df[(stats_file_df["Avg_fold"] >= cov_fold) & (stats_file_df["Covered_percent"] >= cov_perc)]
    stats_file_df = stats_file_df[["#ID", matrix_value]]
    sample_name = ".".join(stats_file.split("/")[-1].split(".")[:-1])
    stats_file_df = stats_file_df.rename(columns = {"#ID": "sample", matrix_value : sample_name})

    return stats_file_df

def merging_stats(stats_files, 
                  cov_fold, 
                  cov_perc, 
                  matrix_value):
    
    initiator = filtering_stats(stats_files[0], cov_fold, cov_perc, matrix_value)
    count = 0
    for stats_file in stats_files[1:]:
        stats_df = filtering_stats(stats_file, cov_fold, cov_perc, matrix_value)
        initiator = pd.merge(initiator, stats_df, on = ["sample"], how = "outer")
        count += 1
        print("Merging the {}th file .....".format(str(count)))
    
    initiator = initiator.fillna(0.0)
    
    return initiator
        





if __name__ == "__main__":
    
    def read_args(args):
        # This function is to parse arguments
        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                    description = textwrap.dedent('''\
                                     This program is to merge multiple stats files generated by pileup.sh into a matrix.
                                     '''),
                                    epilog = textwrap.dedent('''\
                                    examples: merge_pileup_stats.py --stats_files <*.covstats> --output <merged_covstats.tsv>
                                    '''))
        
        parser.add_argument('--stats_files',
                        nargs = '+',
                        help = 'Input multiple stats files for merging. It should be a path pattern with wildcard.',
                        type = str,
                        default = None)
        
        parser.add_argument('--output',
                        nargs = '?',
                        help = 'Specify the output file name.',
                        type = str,
                        default = None)

        parser.add_argument('--cov_fold',
                        nargs = '?',
                        help = 'Specify the minimum average coverage fold for a hit to be retained in a stat file. default: [5]',
                        type = int,
                        default = 5)
        
        parser.add_argument('--cov_perc',
                        nargs = '?',
                        help = 'Specify the coverage percentage for a hit to be retained in a stat file. default: [70]',
                        type = float,
                        default = 70)
        
        parser.add_argument('--matrix_value',
                        nargs = '?',
                        help = 'Choose the value for outputing in the matrix, [Avg_fold] or [Covered_percent]. default: [Avg_fold]',
                        type = str,
                        default = "Avg_fold")
        
        return vars(parser.parse_args())
        
    pars = read_args(sys.argv)
    
    stats_files = pars["stats_files"]
    merged_tab = merging_stats(stats_files,
                    pars["cov_fold"],
                    pars["cov_perc"],
                    pars["matrix_value"])
    
    merged_tab.to_csv(pars["output"], sep = "\t", index = False)
