#!/usr/bin/env python

import pandas as pd
import subprocess
import argparse
import sys
import textwrap

"""
NAME: clean_pileup_stats.py
DESCRIPTION: clean_pileup_stats.py is to remove rows where low coverage occured.
DATE: 03.11.2023
AUTHOR: Kun D. Huang
"""


def filtering_stats(stats_file, 
                    cov_fold, 
                    cov_perc):
    
    stats_file_df = pd.read_csv(stats_file, sep = "\t", index_col = False)
    stats_file_df = stats_file_df[(stats_file_df["Avg_fold"] >= cov_fold) & (stats_file_df["Covered_percent"] >= cov_perc)]

    return stats_file_df



if __name__ == "__main__":
    
    def read_args(args):
        # This function is to parse arguments
        parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                    description = textwrap.dedent('''\
                                     This program is to merge multiple stats files generated by pileup.sh into a matrix.
                                     '''),
                                    epilog = textwrap.dedent('''\
                                    examples: clean_pileup_stats.py --stats_files <*.covstats> --output <merged_covstats.tsv>
                                    '''))
        
        parser.add_argument('--stats_file',
                        nargs = '?',
                        help = 'Input a pileup stats file for cleaning.',
                        type = str,
                        default = None)
        
        parser.add_argument('--output',
                        nargs = '?',
                        help = 'Specify the output file name.',
                        type = str,
                        default = None)

        parser.add_argument('--cov_fold',
                        nargs = '?',
                        help = 'Specify the minimum average coverage fold for a hit to be retained in a stat file. default: [5]',
                        type = int,
                        default = 5)
        
        parser.add_argument('--cov_perc',
                        nargs = '?',
                        help = 'Specify the coverage percentage for a hit to be retained in a stat file. default: [70]',
                        type = float,
                        default = 70)
                
        return vars(parser.parse_args())
        
    pars = read_args(sys.argv)
    
    cleaned_df= filtering_stats(pars["stats_file"],
                    pars["cov_fold"],
                    pars["cov_perc"])
    
    cleaned_df.to_csv(pars["output"], sep = "\t", index = False)
       
